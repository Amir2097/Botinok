import os
import logging
import keyboard as kb
from extraction.weather import weather, weather_long
from Database import session
from dotenv import load_dotenv
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from Database import User, Notes, user_entry, notes_new, city_edit

load_dotenv()

logging.basicConfig(level=logging.INFO)
bot = Bot(os.getenv("TOKEN"))

dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


class ProfilStatesGroup(StatesGroup):
    text = State()
    city = State()
    edit = State()
    weather = State()
    weather_long = State()

@dp.message_handler(commands="start")
async def cmd_random(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    user_name = f"{message.from_user.first_name} {message.from_user.last_name}"
    user_entry(message.from_user.id, user_name, None, message.date)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!üëã –Ø –ë–û–¢–ò–ù–û–ö –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π!ü§ñ –ü–æ–∫–∞ –≤–æ –º–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞–º–µ—Ç–∫–∏!‚úçÔ∏è',
        reply_markup=kb.keyboard_cmd_random)


################################–ó–ê–ú–ï–¢–ö–ò########################################

@dp.callback_query_handler(text="botinok_info_notes")
async def botinok_info_notes(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    await call.message.answer("üëû –ë–û–¢–ò–ù–û–ö –¥–ª—è –∑–∞–º–µ—Ç–æ–∫! üëû\nüóí –í –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ üóí\n"
                              "‚ùóÔ∏è –ö–∞–∫ –±–æ–ª—å—à–∏–µ, —Ç–∞–∫ –∏ –Ω–µ –æ—á–µ–Ω—å ‚ùó\n"
                              "üñä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏\n"
                              "‚ùå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª—é–±—É—é –∑–∞–º–µ—Ç–∫—É! ‚ùå\n"
                              "‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é /start üîô", reply_markup=kb.keyboard_send_random_value)

@dp.callback_query_handler(text="new_notes")
async def new_notes_add(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É ‚úçÔ∏è!")
    await ProfilStatesGroup.text.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.message_handler(state=ProfilStatesGroup.text)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def new_notes_add(message: types.Message, state: FSMContext):
    """

    :param message:
    :param state:
    :return:
    """
    async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['text'] = message.text
        subq = session.query(User.id).filter(User.id_tg == message.from_user.id)
        for q in subq:
            notes_new(data['text'], q.id)
    await message.answer(f'–ó–∞–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞ ‚úçÔ∏è!')
    await state.finish()


@dp.callback_query_handler(text="my_notes")
async def new_notes_add(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    subq = session.query(User).filter(User.id_tg == call.from_user.id).first()
    subq_my_notes = session.query(Notes).filter(Notes.user_id == subq.id).all()
    for data in subq_my_notes:
        await call.message.answer(f'‚åõÔ∏è {data.created_date.strftime("%d-%m %H:%M")}\n'
                                  f'üìã {data.text_notes}', reply_markup=kb.keyboard_new_notes_add)

    @dp.callback_query_handler(text="edit_notes")
    async def edit_notes(call: types.CallbackQuery) -> None:
        """

        :param call:
        :return:
        """
        sample = call.message.text
        await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–æ–≤–æ–º—É!')
        await call.answer(f'–õ—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–ø–∏ –ø–∞—Å—Ç–æ–º –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —á–∞—Ç –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è!', show_alert=True)
        await ProfilStatesGroup.edit.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        @dp.message_handler(state=ProfilStatesGroup.edit)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        async def edit_notes_state(message: types.Message, state: FSMContext):
            """

            :param message:
            :param state:
            :return:
            """
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data['edit'] = message.text
                subq = session.query(User).filter(User.id_tg == message.from_user.id).first()
                subq_notes = session.query(Notes).filter(Notes.user_id == subq.id,
                                                         Notes.text_notes == sample[33:]).first()
                subq_notes.text_notes = data['edit']
                session.commit()
            await message.answer(f'–ó–∞–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úçÔ∏è!')
            await state.finish()
            # –ü–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

    @dp.callback_query_handler(text="delete_notes")
    async def delete_notes(call: types.CallbackQuery) -> None:
        """

        :param call:
        :return:
        """
        sample = call.message.text
        subq = session.query(User).filter(User.id_tg == call.from_user.id).first()
        subq_notes = session.query(Notes).filter(Notes.user_id == subq.id, Notes.text_notes == sample[33:]).first()
        session.delete(subq_notes)
        session.commit()
        await call.message.answer(f'–î–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!')

#################################################################

####################–ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø##################################

@dp.callback_query_handler(text="events_data")
async def events_data_info(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    await call.message.answer("üëû –°–∞–º–∞—è –∫—Ä—É—Ç–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ë–û–¢–ò–ù–ö–ê! üëû\nüé™ –ï—Å–ª–∏ –≤—ã –≤ —Ä–∞–∑–¥—É–º—å—è—Ö –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å? ü•ä\n"
                              "‚ùóÔ∏è –¢–æ–≥–¥–∞ –≤–∞–º –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ –∫–æ –º–Ω–µ‚ùó\n"
                              "ü§ñ –Ø –ø–æ–¥—Å–∫–∞–∂—É –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ üåÉ\n"
                              "‚åöÔ∏è –î–∞–∂–µ –¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è\n"
                              "üíú –ü–æ–ª—å–∑—É–π—Å—è, –ø–æ–∫–∞ —è –¥–æ–±—Ä—ã–π üíú\n"
                              "‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é /start üîô", reply_markup=kb.keyboard_event)

    @dp.callback_query_handler(text="ext_data_event")
    async def event_settings(call: types.CallbackQuery):
        """

        :param call:
        :return:
        """
        pass

    @dp.callback_query_handler(text="setting")
    async def event_settings(call: types.CallbackQuery):
        """

        :param call:
        :return:
        """
        await call.message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", reply_markup=kb.keyboard_event_settings)

        @dp.callback_query_handler(text="city_edit")
        async def event_edit_city(call: types.CallbackQuery) -> None:
            """

            :param call:
            :return:
            """
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ‚úçÔ∏è!")
            await ProfilStatesGroup.city.set()

        @dp.message_handler(state=ProfilStatesGroup.city)
        async def event_city(message: types.Message, state: FSMContext):
            """

            :param message:
            :param state:
            :return:
            """
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data['city'] = message.text
                await message.answer(city_edit(message.from_user.id, data['city']) + "üìå")
            await state.finish()

##############################################################################

############################–ü–û–ì–û–î–ê############################################

@dp.callback_query_handler(text="weather_start")
async def weather_info(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    await call.message.answer("üèû –ü–û–ì–û–î–ù–´–ô –ë–û–¢–ò–ù–û–ö! üåÖ\nüó∫ –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É—é –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø–æ–≥–æ–¥–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!\n"
                              "‚ùóüåÅ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –≥–æ—Ä–æ–¥‚ùó\n"
                              "‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é /start üîô", reply_markup=kb.keyboard_weather_long)

@dp.callback_query_handler(text="weather")
async def new_weather(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    await call.message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!")
    await ProfilStatesGroup.weather.set()

    @dp.message_handler(state=ProfilStatesGroup.weather)
    async def get_weather(message: types.Message, state: FSMContext):
        """

        :param message:
        :param state:
        :return:
        """
        async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            data["weather"] = message.text
            await message.reply(weather(data["weather"]))
            await state.finish()


@dp.callback_query_handler(text="weather_long")
async def new_weather(call: types.CallbackQuery) -> None:
    """

    :param call:
    :return:
    """
    await call.message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π! –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä!")
    await ProfilStatesGroup.weather_long.set()

    @dp.message_handler(state=ProfilStatesGroup.weather_long)
    async def get_weather(message: types.Message, state: FSMContext):
        """

        :param message:
        :param state:
        :return:
        """
        async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            data["weather_long"] = message.text
            for i in weather_long(data["weather_long"]):
                await message.reply(i)
            await state.finish()

###

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
