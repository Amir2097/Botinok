from dotenv import load_dotenv
import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from Database import User, Notes, create_tables, user_entry, notes_new
from Database import session
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

load_dotenv()

logging.basicConfig(level=logging.INFO)
bot = Bot(os.getenv("TOKEN"))

dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class ProfilStatesGroup(StatesGroup):
    text = State()

@dp.message_handler(commands="start")
async def cmd_random(message: types.Message):
    user_name = f"{message.from_user.first_name} {message.from_user.last_name}"
    user_entry(message.from_user.id, user_name, None, message.date)
    print(message)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="ü§ñ –ë–û–¢–ò–ù–û–ö –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ ü§ñ", callback_data="botinok_start"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëã –Ø –ë–û–¢–ò–ù–û–ö –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π!ü§ñ –ü–æ–∫–∞ –≤–æ –º–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞–º–µ—Ç–∫–∏!‚úçÔ∏è", reply_markup=keyboard)

@dp.callback_query_handler(text="botinok_start")
async def send_random_value(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="üìã –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="new_notes"),
        types.InlineKeyboardButton(text="üíº –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="my_notes"),
        types.InlineKeyboardButton(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="edit_notes"),
        types.InlineKeyboardButton(text="üëû –ë–û–¢–ò–ù–û–ö", callback_data="botinok"),
        types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_notes"),
        types.InlineKeyboardButton(text="‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reminder_notes")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    await call.message.answer("–ë–û–¢–ò–ù–û–ö –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫.üëû –í—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!ü§ù"
                              "–í –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ!üïµÔ∏è‚Äç‚ôÇÔ∏èüß†", reply_markup=keyboard)


@dp.callback_query_handler(text="new_notes")
async def new_notes_add(message: types.Message) -> None:
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É ‚úçÔ∏è!")
    await ProfilStatesGroup.text.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message_handler(state=ProfilStatesGroup.text)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def new_notes_add(message: types.Message, state: FSMContext):
    async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['text'] = message.text
        subq = session.query(User.id).filter(User.id_tg == message.from_user.id).first()
        notes_new(data['text'], subq)
    await message.answer("–ó–∞–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞ ‚úçÔ∏è!")
    await state.finish()





if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)



