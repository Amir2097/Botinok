import datetime
import os
import logging

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import keyboard as kb
from extraction.weather import weather, weather_long
from Database import session
from dotenv import load_dotenv
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from Database import User, Notes, user_entry, notes_new, city_edit, conclusion_event, return_city, rerurn_alp_cuty

load_dotenv()

logging.basicConfig(level=logging.INFO)
bot = Bot(os.getenv("TOKEN"))

dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

alphabet_all = rerurn_alp_cuty()

class ProfilStatesGroup(StatesGroup):
    text = State()
    city = State()
    edit = State()
    weather = State()
    weather_long = State()


def gen_markup(quanity: int, prefix: str, row_width: int) -> InlineKeyboardMarkup:
    gen_markup_key = []
    markup = InlineKeyboardMarkup(row_width=row_width)
    for keys_alph in alphabet_all:
        gen_markup_key.append(keys_alph)
    for i in range(quanity):
        markup.insert(InlineKeyboardButton(f"{gen_markup_key[i]}", callback_data=f"{prefix}:{gen_markup_key[i]}"))
    return markup


@dp.message_handler(commands="test")
async def cmd_random(message: types.Message):
    markup = gen_markup(len(alphabet_all), "prefix", 5)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!üëã –Ø –ë–û–¢–ò–ù–û–ö –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π!ü§ñ –ü–æ–∫–∞ –≤–æ –º–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞–º–µ—Ç–∫–∏!‚úçÔ∏è',
        reply_markup=markup)


    # @dp.callback_query_handler(text=f"prefix:{}")
    # async def returnstart(call: types.CallbackQuery) -> None:
    #     pass


@dp.message_handler(commands="start")
async def cmd_random(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    """
    user_name = f"{message.from_user.first_name} {message.from_user.last_name}"
    user_entry(message.from_user.id, user_name, None, message.date)
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!üëã –Ø –ë–û–¢–ò–ù–û–ö –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π!ü§ñ –ü–æ–∫–∞ –≤–æ –º–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞–º–µ—Ç–∫–∏!‚úçÔ∏è',
        reply_markup=kb.keyboard_cmd_random)


@dp.callback_query_handler(text="returnstart")
async def returnstart(call: types.CallbackQuery) -> None:
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ inline –∫–Ω–æ–ø–æ–∫
    """
    await call.message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {call.from_user.first_name}!üëã –Ø –ë–û–¢–ò–ù–û–ö –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π!ü§ñ –ü–æ–∫–∞ –≤–æ –º–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–∞–º–µ—Ç–∫–∏!‚úçÔ∏è',
        reply_markup=kb.keyboard_cmd_random)


################################–ó–ê–ú–ï–¢–ö–ò########################################

@dp.callback_query_handler(text="botinok_info_notes")
async def botinok_info_notes(call: types.CallbackQuery) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ—Ç–æ–∫, —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    :return: inline –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞' –∏ '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏'
    """
    await call.message.answer("üëû –ë–û–¢–ò–ù–û–ö –¥–ª—è –∑–∞–º–µ—Ç–æ–∫! üëû\nüóí –í –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ üóí\n"
                              "‚ùóÔ∏è –ö–∞–∫ –±–æ–ª—å—à–∏–µ, —Ç–∞–∫ –∏ –Ω–µ –æ—á–µ–Ω—å ‚ùó\n"
                              "üñä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏\n"
                              "‚ùå –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª—é–±—É—é –∑–∞–º–µ—Ç–∫—É! ‚ùå\n"
                              "‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é /start üîô", reply_markup=kb.keyboard_send_random_value)


@dp.callback_query_handler(text="new_notes")
async def new_notes_add(call: types.CallbackQuery) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É ‚úçÔ∏è!")
    await ProfilStatesGroup.text.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.message_handler(state=ProfilStatesGroup.text)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def new_notes_add(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–º–µ—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ë–î
    """
    async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['text'] = message.text
        subq = session.query(User.id).filter(User.id_tg == message.from_user.id)
        for q in subq:
            notes_new(data['text'], q.id)
    await message.answer(f'–ó–∞–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞ ‚úçÔ∏è!')
    await state.finish()


@dp.callback_query_handler(text="my_notes")
async def new_notes_add(call: types.CallbackQuery) -> None:
    """
    –í—ã–¥–∞—á–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ id_tg
    """
    subq = session.query(User).filter(User.id_tg == call.from_user.id).first()
    subq_my_notes = session.query(Notes).filter(Notes.user_id == subq.id).all()
    for data in subq_my_notes:
        await call.message.answer(f'‚åõÔ∏è {data.created_date.strftime("%d-%m %H:%M")}\n'
                                  f'üìã {data.text_notes}', reply_markup=kb.keyboard_new_notes_add)

    @dp.callback_query_handler(text="edit_notes")
    async def edit_notes(call: types.CallbackQuery) -> None:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        """
        sample = call.message.text
        await call.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–æ–≤–æ–º—É!')
        await call.answer(f'–õ—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–ø–∏ –ø–∞—Å—Ç–æ–º –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —á–∞—Ç –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è!', show_alert=True)
        await ProfilStatesGroup.edit.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        @dp.message_handler(state=ProfilStatesGroup.edit)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        async def edit_notes_state(message: types.Message, state: FSMContext):
            """
            –ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
            """
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data['edit'] = message.text
                subq = session.query(User).filter(User.id_tg == message.from_user.id).first()
                subq_notes = session.query(Notes).filter(Notes.user_id == subq.id,
                                                         Notes.text_notes == sample[33:]).first()
                subq_notes.text_notes = data['edit']
                session.commit()
            await message.answer(f'–ó–∞–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úçÔ∏è!')
            await state.finish()

    @dp.callback_query_handler(text="delete_notes")
    async def delete_notes(call: types.CallbackQuery) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ë–î
        """
        sample = call.message.text
        subq = session.query(User).filter(User.id_tg == call.from_user.id).first()
        subq_notes = session.query(Notes).filter(Notes.user_id == subq.id, Notes.text_notes == sample[33:]).first()
        session.delete(subq_notes)
        session.commit()
        await call.message.answer(f'–î–∞–Ω–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!')

#################################################################

####################–ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø##################################

@dp.callback_query_handler(text="events_data")
async def events_data_info(call: types.CallbackQuery) -> None:
    await call.message.answer("üëû –°–ø–∏—Å–æ–∫ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–º–∞—Å—Å–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ 3 –¥–Ω—è ", reply_markup=kb.keyboard_event)

    @dp.callback_query_handler(text="ext_data_event")
    async def event_settings(call: types.CallbackQuery):
        buttons_finish = [types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="events_data")]
        keyboard_finish = types.InlineKeyboardMarkup(row_width=1)
        keyboard_finish.add(*buttons_finish)
        buttons_set = [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="setting")]
        keyboard_set = types.InlineKeyboardMarkup(row_width=1)
        keyboard_set.add(*buttons_set)
        try:
            events_for_user = conclusion_event(call.from_user.id)
            count_event = 0
            for pars_event in events_for_user:
                buttons_afisha = [types.InlineKeyboardButton(text="üîó–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", url=f"{pars_event[4]}")]
                keyboard_afisha = types.InlineKeyboardMarkup(row_width=1)
                keyboard_afisha.add(*buttons_afisha)

                try:
                    await call.message.answer_photo(pars_event[3], caption=
                    f"üóì–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - {pars_event[0]}\n"
                    f"üéµ–ñ–∞–Ω—Ä - {pars_event[1]}\n"
                    f"‚òëÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ - {pars_event[2]}\n", reply_markup=keyboard_afisha)
                    count_event += 1

                except:
                    with open("save_error.txt", "a") as open_file_error:
                        open_file_error.write(f"{datetime.datetime.now()}.  "
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {call.from_user.id}.  "
                                              f"–û—à–∏–±–∫–∞ - {pars_event[3]}.  "
                                              f"–°—Å—ã–ª–∫–∞ - {pars_event[4]}\n")

            await call.message.answer(
                f"–í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ {return_city(call.from_user.id)[0]} - {count_event}",
                reply_markup=keyboard_finish)
        except:
            await call.message.answer(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–≤–æ–¥–∏–º—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º. "
                                      f"–í–æ–∑–º–æ–∂–Ω–æ —É –í–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥. –ó–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                                      reply_markup=keyboard_set)

    @dp.callback_query_handler(text="setting")
    async def event_settings(call: types.CallbackQuery):

        try:
            set_city = return_city(call.from_user.id)[0]
        except TypeError:
            set_city = "‚ùó‚ùó‚ùó –ì–û–†–û–î –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ‚ùó‚ùó‚ùó"

        await call.message.answer("üèõÔ∏è–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—Ä–æ–≤–æ–¥–∏–º—ã—Ö –≤ –í–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.\n\n"
                                  "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                                  f"üèô–≥–æ—Ä–æ–¥ - {set_city}",
                                  reply_markup=kb.keyboard_event_settings)

        @dp.callback_query_handler(text="city_edit")
        async def event_edit_city(call: types.CallbackQuery) -> None:
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ‚úçÔ∏è!")
            await ProfilStatesGroup.city.set()

        @dp.message_handler(state=ProfilStatesGroup.city)
        async def event_city(message: types.Message, state: FSMContext):
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data['city'] = message.text
                # await message.answer(city_edit(message.from_user.id, data['city']) + "üìå")
                if city_edit(message.from_user.id, data['city']) == "–î–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ":
                    await message.answer(city_edit(message.from_user.id, data['city']),
                                         reply_markup=kb.keyboard_event_settings)
                else:
                    await message.answer(city_edit(message.from_user.id, data['city']) + "üìå",
                                         reply_markup=kb.keyboard_event)
            await state.finish()


##############################################################################

############################–ü–û–ì–û–î–ê############################################

@dp.callback_query_handler(text="weather_start")
async def weather_info(call: types.CallbackQuery) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–≥–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–µ–π
    return: inline –∫–Ω–æ–ø–∫–∏ '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å' –∏ '–ù–∞ 5 –¥–Ω–µ–π'
    """
    await call.message.answer("üèû –ü–û–ì–û–î–ù–´–ô –ë–û–¢–ò–ù–û–ö! üåÖ\nüó∫ –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É—é –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ –ø–æ–≥–æ–¥–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!\n"
                              "‚ùóüåÅ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –≥–æ—Ä–æ–¥‚ùó\n"
                              "‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é /start üîô", reply_markup=kb.keyboard_weather_long)


@dp.callback_query_handler(text="weather")
async def new_weather(call: types.CallbackQuery) -> None:
    """
    –í—ã–¥–∞–µ—Ç –ø–æ–≥–æ–¥—É —Å–µ–π—á–∞—Å –ø–æ –≥–æ—Ä–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è if: –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –≤ –ë–î –∏
    else: –µ—Å–ª–∏ –Ω–µ—Ç—É, –≥–æ—Ä–æ–¥ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î
    –ò–º–µ–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è weather –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ extraction.weather.py
    """
    ext_city_db = session.query(User).filter(User.id_tg == call.from_user.id).first()
    if ext_city_db.city:
        await call.message.answer(
            "–í—ã–¥–∞—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã —Å–µ–π—á–∞—Å –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ! –ù–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
            reply_markup=kb.keyboard_weather_another)
        await call.message.answer(weather(return_city(call.from_user.id)[0]))

    else:
        await call.message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")
        await ProfilStatesGroup.weather.set()

        @dp.message_handler(state=ProfilStatesGroup.weather)
        async def get_weather(message: types.Message, state: FSMContext):
            """
            –ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å—Ö–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é weather
            """
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data["weather"] = message.text
                await message.answer(weather(data["weather"]))
                await state.finish()

    @dp.callback_query_handler(text="weather_city")
    async def new_weather(call: types.CallbackQuery) -> None:
        """
        –í—ã–¥–∞—á–∞ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≤ —á–∞—Ç –≥–æ—Ä–æ–¥—É
        """
        await call.message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")
        await ProfilStatesGroup.weather.set()

        @dp.message_handler(state=ProfilStatesGroup.weather)
        async def get_weather(message: types.Message, state: FSMContext):
            """
            –ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ weather –≤—ã–¥–∞–µ—Ç –ø–æ–≥–æ–¥—É
            """
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data["weather"] = message.text
                await message.answer(weather(data["weather"]))
                await state.finish()


@dp.callback_query_handler(text="weather_long")
async def new_weather(call: types.CallbackQuery) -> None:
    """
    –í—ã–¥–∞—á–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π. –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä
    –†–µ–∞–ª–∏–∑–∏—è if: –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, else: –µ—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç—É
    –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã weather_long –∏–∑ extraction.weather.py
    """
    ext_city_db = session.query(User).filter(User.id_tg == call.from_user.id).first()
    if ext_city_db.city:
        buttons_weather_another_long = [
            types.InlineKeyboardButton(text=f'üóΩ {ext_city_db.city}', callback_data="weather_my_city"),
            types.InlineKeyboardButton(text="üèô –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="weather_city_settings"),
            types.InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="returnstart")
        ]
        keyboard_weather_another_long = types.InlineKeyboardMarkup(row_width=2)
        keyboard_weather_another_long.add(*buttons_weather_another_long)
        await call.message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –°–≤–æ–¥–∫–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π! –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä! –í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!",
            reply_markup=keyboard_weather_another_long)

        @dp.callback_query_handler(text="weather_my_city")
        async def weather_my_city(call: types.CallbackQuery) -> None:
            """
            –í—ã–¥–∞—á–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π weather_long
            """
            if weather_long(ext_city_db.city) == "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞":
                await call.message.answer(weather_long(ext_city_db.city))
            else:
                for i in weather_long(ext_city_db.city):
                    await call.message.answer(i)

        @dp.callback_query_handler(text="weather_city_settings")
        async def weather_city_settings(call: types.CallbackQuery) -> None:
            """
            –ú–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
            """
            await call.message.answer(
                '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π! –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä!')
            await ProfilStatesGroup.weather_long.set()

            @dp.message_handler(state=ProfilStatesGroup.weather_long)
            async def get_weather(message: types.Message, state: FSMContext):
                """
                –ë–µ—Ä–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é weather_long,
                –≤—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π
                """
                async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    data["weather_long"] = message.text
                    if weather_long(data["weather_long"]) == "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞":
                        await message.answer(weather_long(data["weather_long"]))
                    else:
                        for i in weather_long(data["weather_long"]):
                            await message.answer(i)
                    await state.finish()

    else:
        await call.message.answer(
            '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π! –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä!')

        await ProfilStatesGroup.weather_long.set()

        @dp.message_handler(state=ProfilStatesGroup.weather_long)
        async def get_weather_from_user(message: types.Message, state: FSMContext):
            """
            –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑ –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            –ß–µ—Ä–µ–∑ weather_long —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã–¥–∞—á—É –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π
            """
            async with state.proxy() as data:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                data["weather_long"] = message.text
                if weather_long(data["weather_long"]) == "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞":
                    await message.answer(weather_long(data["weather_long"]))
                else:
                    for i in weather_long(data["weather_long"]):
                        await message.answer(i)
                await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
